name: Build and Release Tagged Image

on:
  push:
    tags:
      - '*'  # Triggers on any tag push
  workflow_dispatch:  # Allows manual triggering from GitHub UI
    inputs:
      version:
        description: 'Version to build (e.g., 19.25.0.0)'
        required: true
        default: '19.25.0.0'
      publish:
        description: 'Publish to registry?'
        required: true
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/oracle-instantclient

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      oracle:
        image: gvenzl/oracle-free:latest
        env:
          ORACLE_PASSWORD: testpass123
        ports:
          - 1521:1521
        options: >-
          --health-cmd "sqlplus -L sys/testpass123@localhost:1521/freepdb1 as sysdba @/dev/null"
          --health-interval 20s
          --health-timeout 10s
          --health-retries 10

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Dev Container CLI
        run: npm install -g @devcontainers/cli

      - name: Test Dev Container
        run: |
          echo "🧪 Testing Oracle Instant Client installation..."
          devcontainer up --workspace-folder .
          devcontainer exec --workspace-folder . chmod +x ./test/test-sqlplus.sh
          devcontainer exec --workspace-folder . ./test/test-sqlplus.sh

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Manual trigger - use input version
            VERSION="${{ github.event.inputs.version }}"
            echo "🧪 Manual test mode with version: $VERSION"
          else
            # Tag trigger - extract from tag
            VERSION=${GITHUB_REF#refs/tags/}
            VERSION=${VERSION#v}
            echo "📦 Tag-triggered build for version: $VERSION"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ steps.version.outputs.version }}
            type=raw,value=latest

      - name: Build with devcontainer
        uses: devcontainers/ci@v0.3
        with:
          imageName: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          imageTag: ${{ steps.version.outputs.version }},latest
          push: never
          runCmd: |
            echo "🔍 Verifying SQLPlus installation..."
            sqlplus -version
            echo "✅ Image build completed for version ${{ steps.version.outputs.version }}"

      - name: Push to registry
        if: ${{ github.event.inputs.publish == 'true' || github.event_name == 'push' }}
        run: |
          echo "🚀 Pushing images to registry..."
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          echo "✅ Images pushed successfully"

      - name: Test mode notification
        if: ${{ github.event.inputs.publish != 'true' && github.event_name != 'push' }}
        run: |
          echo "🧪 Test mode - images built but not pushed to registry"

      - name: Create release summary
        run: |
          echo "## 🚀 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** \`${{ steps.version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Latest:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Usage" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          echo '{' >> $GITHUB_STEP_SUMMARY
          echo '  "image": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}"' >> $GITHUB_STEP_SUMMARY
          echo '}' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
