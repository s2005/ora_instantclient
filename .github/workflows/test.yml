name: Test Suite

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
  workflow_dispatch:  # Allow manual triggering

jobs:
  test-dev-container:
    runs-on: ubuntu-latest
    services:
      oracle:
        image: gvenzl/oracle-free:latest
        env:
          ORACLE_PASSWORD: testpass
        ports:
          - 1521:1521
        options: >-
          --health-cmd healthcheck.sh
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test dev container with Oracle SQLPlus
        uses: devcontainers/ci@v0.3
        with:
          runCmd: |
            # Wait for Oracle service to be ready
            echo "Waiting for Oracle database to be ready..."
            timeout=60
            while [ $timeout -gt 0 ]; do
              if echo 'SELECT 1 FROM DUAL; EXIT;' | timeout 10s sqlplus -s system/testpass@//host.docker.internal:1521/freepdb1 >/dev/null 2>&1; then
                echo "‚úì Oracle database is ready"
                break
              fi
              echo "Waiting for Oracle database... ($timeout seconds remaining)"
              sleep 5
              timeout=$((timeout-5))
            done

            # Set database connection for comprehensive tests
            export ORACLE_TEST_CONNECTION='system/testpass@//host.docker.internal:1521/freepdb1'

            # Make test script executable and run it
            chmod +x test/test-sqlplus.sh
            ./test/test-sqlplus.sh

  validate-container-config:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install jq for JSON validation
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Validate devcontainer.json
        run: |
          echo "=== Validating Dev Container Configuration ==="
          
          # Check devcontainer.json syntax
          echo "Checking devcontainer.json syntax..."
          jq . .devcontainer/devcontainer.json > /dev/null && echo "‚úì devcontainer.json is valid JSON"
          
          # Check feature configurations
          echo "Checking feature configurations..."
          for feature_dir in .devcontainer/features/*/; do
            if [ -d "$feature_dir" ]; then
              feature_name=$(basename "$feature_dir")
              echo "Validating feature: $feature_name"
              
              if [ -f "$feature_dir/devcontainer-feature.json" ]; then
                echo "‚úì Feature configuration found for $feature_name"
                jq . "$feature_dir/devcontainer-feature.json" > /dev/null && echo "‚úì Feature JSON is valid for $feature_name"
              else
                echo "‚úó Missing devcontainer-feature.json for $feature_name"
                exit 1
              fi
              
              if [ -f "$feature_dir/install.sh" ]; then
                echo "‚úì Install script found for $feature_name"
                # Check if script is executable
                if [ -x "$feature_dir/install.sh" ]; then
                  echo "‚úì Install script is executable for $feature_name"
                else
                  echo "‚ö† Install script is not executable for $feature_name"
                fi
              else
                echo "‚úó Missing install.sh for $feature_name"
                exit 1
              fi
            fi
          done

      - name: Test feature installation scripts
        run: |
          echo "=== Testing Feature Scripts Syntax ==="
          
          # Test script syntax without execution
          for feature_dir in .devcontainer/features/*/; do
            if [ -d "$feature_dir" ] && [ -f "$feature_dir/install.sh" ]; then
              feature_name=$(basename "$feature_dir")
              echo "Testing syntax for $feature_name install script..."
              
              # Check bash syntax
              if bash -n "$feature_dir/install.sh"; then
                echo "‚úì Bash syntax valid for $feature_name"
              else
                echo "‚úó Bash syntax error in $feature_name"
                exit 1
              fi
            fi
          done

  test-basic-functionality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test basic container functionality without Oracle
        uses: devcontainers/ci@v0.3
        with:
          runCmd: |
            echo "=== Basic Dev Container Functionality Tests ==="
            
            # Test 1: Check SQLPlus installation
            echo "Test 1: Checking SQLPlus installation..."
            if command -v sqlplus >/dev/null 2>&1; then
              echo "‚úì SQLPlus command available"
              sqlplus -v
            else
              echo "‚úó SQLPlus command not found"
              exit 1
            fi
            
            # Test 2: Check Oracle environment
            echo "Test 2: Checking Oracle environment..."
            echo "LD_LIBRARY_PATH: $LD_LIBRARY_PATH"
            echo "PATH: $PATH"
            
            if [ -n "$LD_LIBRARY_PATH" ] && echo "$LD_LIBRARY_PATH" | grep -q oracle; then
              echo "‚úì Oracle libraries in LD_LIBRARY_PATH"
            else
              echo "‚úó Oracle libraries not found in LD_LIBRARY_PATH"
              exit 1
            fi
            
            # Test 3: Check Oracle installation directory
            echo "Test 3: Checking Oracle installation..."
            if ls /opt/oracle/instantclient_* >/dev/null 2>&1; then
              echo "‚úì Oracle Instant Client directory found"
              ls -la /opt/oracle/instantclient_*/
            else
              echo "‚úó Oracle Instant Client directory not found"
              exit 1
            fi
            
            # Test 4: Check Oracle shared libraries
            echo "Test 4: Checking Oracle shared libraries..."
            oracle_lib=$(find /opt/oracle -name 'libclntsh.so*' | head -1)
            if [ -n "$oracle_lib" ]; then
              echo "‚úì Oracle client shared library found: $oracle_lib"
              # Test library dependencies
              if command -v ldd >/dev/null 2>&1; then
                echo "Library dependencies:"
                ldd "$oracle_lib" | head -5
              fi
            else
              echo "‚úó Oracle client shared library not found"
              exit 1
            fi
            
            # Test 5: Check common dev container features
            echo "Test 5: Checking common dev container tools..."
            
            # Check user
            echo "Current user: $(whoami)"
            echo "User ID: $(id)"
            
            # Check common tools
            for tool in git curl wget; do
              if command -v $tool >/dev/null 2>&1; then
                echo "‚úì $tool is available"
              else
                echo "‚ö† $tool is not available"
              fi
            done
            
            echo "‚úÖ Basic functionality tests completed successfully!"

  test-summary:
    runs-on: ubuntu-latest
    needs: [test-dev-container, validate-container-config, test-basic-functionality]
    if: always()
    steps:
      - name: Test Results Summary
        run: |
          echo "=== Dev Container Test Results Summary ==="
          echo ""
          
          # Check each job result
          container_test="${{ needs.test-dev-container.result }}"
          config_test="${{ needs.validate-container-config.result }}"
          basic_test="${{ needs.test-basic-functionality.result }}"
          
          echo "üîç Test Results:"
          echo "  - Dev Container with Oracle: $container_test"
          echo "  - Configuration Validation: $config_test" 
          echo "  - Basic Functionality: $basic_test"
          echo ""
          
          # Determine overall result
          if [ "$container_test" = "success" ] && [ "$config_test" = "success" ] && [ "$basic_test" = "success" ]; then
            echo "‚úÖ All tests passed successfully!"
            echo ""
            echo "‚úì Oracle Instant Client installation verified"
            echo "‚úì SQLPlus functionality confirmed" 
            echo "‚úì Dev container configuration validated"
            echo "‚úì Basic container features working"
            echo "‚úì Database connectivity tested"
            echo ""
            echo "üéâ Oracle Instant Client dev container is ready for use!"
          else
            echo "‚ùå Some tests failed:"
            echo ""
            if [ "$container_test" != "success" ]; then
              echo "  - Dev container with Oracle database testing failed"
            fi
            if [ "$config_test" != "success" ]; then
              echo "  - Configuration validation failed"
            fi
            if [ "$basic_test" != "success" ]; then
              echo "  - Basic functionality testing failed"
            fi
            echo ""
            echo "Please check the logs above for detailed error information."
            exit 1
          fi
